/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ClientCapabilitiesDto } from '../models';
// @ts-ignore
import { GeneralCommand } from '../models';
// @ts-ignore
import { GeneralCommandType } from '../models';
// @ts-ignore
import { NameIdPair } from '../models';
// @ts-ignore
import { PlayCommand } from '../models';
// @ts-ignore
import { PlaystateCommand } from '../models';
// @ts-ignore
import { SessionInfo } from '../models';
// @ts-ignore
import { UNKNOWN_BASE_TYPE } from '../models';
/**
 * SessionApi - axios parameter creator
 * @export
 */
export const SessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Adds an additional user to a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToSession: async (sessionId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('addUserToSession', 'sessionId', sessionId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addUserToSession', 'userId', userId)
            const localVarPath = `/Sessions/{sessionId}/User/{userId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Instructs a session to browse to an item or view.
         * @param {string} sessionId The session Id.
         * @param {string} itemType The type of item to browse to.
         * @param {string} itemId The Id of the item.
         * @param {string} itemName The name of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayContent: async (sessionId: string, itemType: string, itemId: string, itemName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('displayContent', 'sessionId', sessionId)
            // verify required parameter 'itemType' is not null or undefined
            assertParamExists('displayContent', 'itemType', itemType)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('displayContent', 'itemId', itemId)
            // verify required parameter 'itemName' is not null or undefined
            assertParamExists('displayContent', 'itemName', itemName)
            const localVarPath = `/Sessions/{sessionId}/Viewing`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (itemType !== undefined) {
                localVarQueryParameter['itemType'] = itemType;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (itemName !== undefined) {
                localVarQueryParameter['itemName'] = itemName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all auth providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthProviders: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/Providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all password reset providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordResetProviders: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/PasswordResetProviders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of sessions.
         * @param {string} [controllableByUserId] Filter by sessions that a given user is allowed to remote control.
         * @param {string} [deviceId] Filter by device Id.
         * @param {number} [activeWithinSeconds] Optional. Filter by sessions that were active in the last n seconds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessions: async (controllableByUserId?: string, deviceId?: string, activeWithinSeconds?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (controllableByUserId !== undefined) {
                localVarQueryParameter['controllableByUserId'] = controllableByUserId;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (activeWithinSeconds !== undefined) {
                localVarQueryParameter['activeWithinSeconds'] = activeWithinSeconds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Instructs a session to play an item.
         * @param {string} sessionId The session id.
         * @param {PlayCommand} playCommand The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.
         * @param {Array<string>} itemIds The ids of the items to play, comma delimited.
         * @param {number} [startPositionTicks] The starting position of the first item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        play: async (sessionId: string, playCommand: PlayCommand, itemIds: Array<string>, startPositionTicks?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('play', 'sessionId', sessionId)
            // verify required parameter 'playCommand' is not null or undefined
            assertParamExists('play', 'playCommand', playCommand)
            // verify required parameter 'itemIds' is not null or undefined
            assertParamExists('play', 'itemIds', itemIds)
            const localVarPath = `/Sessions/{sessionId}/Playing`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (playCommand !== undefined) {
                localVarQueryParameter['playCommand'] = playCommand;
            }

            if (itemIds) {
                localVarQueryParameter['itemIds'] = itemIds;
            }

            if (startPositionTicks !== undefined) {
                localVarQueryParameter['startPositionTicks'] = startPositionTicks;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates capabilities for a device.
         * @param {string} [id] The session id.
         * @param {Array<string>} [playableMediaTypes] A list of playable media types, comma delimited. Audio, Video, Book, Photo.
         * @param {Array<GeneralCommandType>} [supportedCommands] A list of supported remote control commands, comma delimited.
         * @param {boolean} [supportsMediaControl] Determines whether media can be played remotely..
         * @param {boolean} [supportsSync] Determines whether sync is supported.
         * @param {boolean} [supportsPersistentIdentifier] Determines whether the device supports a unique identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCapabilities: async (id?: string, playableMediaTypes?: Array<string>, supportedCommands?: Array<GeneralCommandType>, supportsMediaControl?: boolean, supportsSync?: boolean, supportsPersistentIdentifier?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Sessions/Capabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (playableMediaTypes) {
                localVarQueryParameter['playableMediaTypes'] = playableMediaTypes;
            }

            if (supportedCommands) {
                localVarQueryParameter['supportedCommands'] = supportedCommands;
            }

            if (supportsMediaControl !== undefined) {
                localVarQueryParameter['supportsMediaControl'] = supportsMediaControl;
            }

            if (supportsSync !== undefined) {
                localVarQueryParameter['supportsSync'] = supportsSync;
            }

            if (supportsPersistentIdentifier !== undefined) {
                localVarQueryParameter['supportsPersistentIdentifier'] = supportsPersistentIdentifier;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates capabilities for a device.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The MediaBrowser.Model.Session.ClientCapabilities.
         * @param {string} [id] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFullCapabilities: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, id?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('postFullCapabilities', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/Sessions/Capabilities/Full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes an additional user from a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromSession: async (sessionId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('removeUserFromSession', 'sessionId', sessionId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeUserFromSession', 'userId', userId)
            const localVarPath = `/Sessions/{sessionId}/User/{userId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reports that a session has ended.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSessionEnded: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Sessions/Logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reports that a session is viewing an item.
         * @param {string} itemId The item id.
         * @param {string} [sessionId] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportViewing: async (itemId: string, sessionId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('reportViewing', 'itemId', itemId)
            const localVarPath = `/Sessions/Viewing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issues a full general command to a client.
         * @param {string} sessionId The session id.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The MediaBrowser.Model.Session.GeneralCommand.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFullGeneralCommand: async (sessionId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('sendFullGeneralCommand', 'sessionId', sessionId)
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('sendFullGeneralCommand', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/Sessions/{sessionId}/Command`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issues a general command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGeneralCommand: async (sessionId: string, command: GeneralCommandType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('sendGeneralCommand', 'sessionId', sessionId)
            // verify required parameter 'command' is not null or undefined
            assertParamExists('sendGeneralCommand', 'command', command)
            const localVarPath = `/Sessions/{sessionId}/Command/{command}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"command"}}`, encodeURIComponent(String(command)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issues a command to a client to display a message to the user.
         * @param {string} sessionId The session id.
         * @param {string} text The message test.
         * @param {string} [header] The message header.
         * @param {number} [timeoutMs] The message timeout. If omitted the user will have to confirm viewing the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessageCommand: async (sessionId: string, text: string, header?: string, timeoutMs?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('sendMessageCommand', 'sessionId', sessionId)
            // verify required parameter 'text' is not null or undefined
            assertParamExists('sendMessageCommand', 'text', text)
            const localVarPath = `/Sessions/{sessionId}/Message`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (header !== undefined) {
                localVarQueryParameter['header'] = header;
            }

            if (timeoutMs !== undefined) {
                localVarQueryParameter['timeoutMs'] = timeoutMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issues a playstate command to a client.
         * @param {string} sessionId The session id.
         * @param {PlaystateCommand} command The MediaBrowser.Model.Session.PlaystateCommand.
         * @param {number} [seekPositionTicks] The optional position ticks.
         * @param {string} [controllingUserId] The optional controlling user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPlaystateCommand: async (sessionId: string, command: PlaystateCommand, seekPositionTicks?: number, controllingUserId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('sendPlaystateCommand', 'sessionId', sessionId)
            // verify required parameter 'command' is not null or undefined
            assertParamExists('sendPlaystateCommand', 'command', command)
            const localVarPath = `/Sessions/{sessionId}/Playing/{command}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"command"}}`, encodeURIComponent(String(command)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (seekPositionTicks !== undefined) {
                localVarQueryParameter['seekPositionTicks'] = seekPositionTicks;
            }

            if (controllingUserId !== undefined) {
                localVarQueryParameter['controllingUserId'] = controllingUserId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issues a system command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSystemCommand: async (sessionId: string, command: GeneralCommandType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('sendSystemCommand', 'sessionId', sessionId)
            // verify required parameter 'command' is not null or undefined
            assertParamExists('sendSystemCommand', 'command', command)
            const localVarPath = `/Sessions/{sessionId}/System/{command}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${"command"}}`, encodeURIComponent(String(command)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Adds an additional user to a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserToSession(sessionId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserToSession(sessionId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Instructs a session to browse to an item or view.
         * @param {string} sessionId The session Id.
         * @param {string} itemType The type of item to browse to.
         * @param {string} itemId The Id of the item.
         * @param {string} itemName The name of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async displayContent(sessionId: string, itemType: string, itemId: string, itemName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.displayContent(sessionId, itemType, itemId, itemName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all auth providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthProviders(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NameIdPair>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthProviders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all password reset providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPasswordResetProviders(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NameIdPair>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPasswordResetProviders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of sessions.
         * @param {string} [controllableByUserId] Filter by sessions that a given user is allowed to remote control.
         * @param {string} [deviceId] Filter by device Id.
         * @param {number} [activeWithinSeconds] Optional. Filter by sessions that were active in the last n seconds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessions(controllableByUserId?: string, deviceId?: string, activeWithinSeconds?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SessionInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessions(controllableByUserId, deviceId, activeWithinSeconds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Instructs a session to play an item.
         * @param {string} sessionId The session id.
         * @param {PlayCommand} playCommand The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.
         * @param {Array<string>} itemIds The ids of the items to play, comma delimited.
         * @param {number} [startPositionTicks] The starting position of the first item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async play(sessionId: string, playCommand: PlayCommand, itemIds: Array<string>, startPositionTicks?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.play(sessionId, playCommand, itemIds, startPositionTicks, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates capabilities for a device.
         * @param {string} [id] The session id.
         * @param {Array<string>} [playableMediaTypes] A list of playable media types, comma delimited. Audio, Video, Book, Photo.
         * @param {Array<GeneralCommandType>} [supportedCommands] A list of supported remote control commands, comma delimited.
         * @param {boolean} [supportsMediaControl] Determines whether media can be played remotely..
         * @param {boolean} [supportsSync] Determines whether sync is supported.
         * @param {boolean} [supportsPersistentIdentifier] Determines whether the device supports a unique identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCapabilities(id?: string, playableMediaTypes?: Array<string>, supportedCommands?: Array<GeneralCommandType>, supportsMediaControl?: boolean, supportsSync?: boolean, supportsPersistentIdentifier?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCapabilities(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates capabilities for a device.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The MediaBrowser.Model.Session.ClientCapabilities.
         * @param {string} [id] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFullCapabilities(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, id?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFullCapabilities(uNKNOWNBASETYPE, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Removes an additional user from a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserFromSession(sessionId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserFromSession(sessionId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reports that a session has ended.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportSessionEnded(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportSessionEnded(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reports that a session is viewing an item.
         * @param {string} itemId The item id.
         * @param {string} [sessionId] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportViewing(itemId: string, sessionId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportViewing(itemId, sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issues a full general command to a client.
         * @param {string} sessionId The session id.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The MediaBrowser.Model.Session.GeneralCommand.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendFullGeneralCommand(sessionId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendFullGeneralCommand(sessionId, uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issues a general command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendGeneralCommand(sessionId: string, command: GeneralCommandType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendGeneralCommand(sessionId, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issues a command to a client to display a message to the user.
         * @param {string} sessionId The session id.
         * @param {string} text The message test.
         * @param {string} [header] The message header.
         * @param {number} [timeoutMs] The message timeout. If omitted the user will have to confirm viewing the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessageCommand(sessionId: string, text: string, header?: string, timeoutMs?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessageCommand(sessionId, text, header, timeoutMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issues a playstate command to a client.
         * @param {string} sessionId The session id.
         * @param {PlaystateCommand} command The MediaBrowser.Model.Session.PlaystateCommand.
         * @param {number} [seekPositionTicks] The optional position ticks.
         * @param {string} [controllingUserId] The optional controlling user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPlaystateCommand(sessionId: string, command: PlaystateCommand, seekPositionTicks?: number, controllingUserId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPlaystateCommand(sessionId, command, seekPositionTicks, controllingUserId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issues a system command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendSystemCommand(sessionId: string, command: GeneralCommandType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendSystemCommand(sessionId, command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionApiFp(configuration)
    return {
        /**
         * 
         * @summary Adds an additional user to a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToSession(sessionId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.addUserToSession(sessionId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Instructs a session to browse to an item or view.
         * @param {string} sessionId The session Id.
         * @param {string} itemType The type of item to browse to.
         * @param {string} itemId The Id of the item.
         * @param {string} itemName The name of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        displayContent(sessionId: string, itemType: string, itemId: string, itemName: string, options?: any): AxiosPromise<void> {
            return localVarFp.displayContent(sessionId, itemType, itemId, itemName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all auth providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthProviders(options?: any): AxiosPromise<Array<NameIdPair>> {
            return localVarFp.getAuthProviders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all password reset providers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordResetProviders(options?: any): AxiosPromise<Array<NameIdPair>> {
            return localVarFp.getPasswordResetProviders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of sessions.
         * @param {string} [controllableByUserId] Filter by sessions that a given user is allowed to remote control.
         * @param {string} [deviceId] Filter by device Id.
         * @param {number} [activeWithinSeconds] Optional. Filter by sessions that were active in the last n seconds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessions(controllableByUserId?: string, deviceId?: string, activeWithinSeconds?: number, options?: any): AxiosPromise<Array<SessionInfo>> {
            return localVarFp.getSessions(controllableByUserId, deviceId, activeWithinSeconds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Instructs a session to play an item.
         * @param {string} sessionId The session id.
         * @param {PlayCommand} playCommand The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.
         * @param {Array<string>} itemIds The ids of the items to play, comma delimited.
         * @param {number} [startPositionTicks] The starting position of the first item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        play(sessionId: string, playCommand: PlayCommand, itemIds: Array<string>, startPositionTicks?: number, options?: any): AxiosPromise<void> {
            return localVarFp.play(sessionId, playCommand, itemIds, startPositionTicks, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates capabilities for a device.
         * @param {string} [id] The session id.
         * @param {Array<string>} [playableMediaTypes] A list of playable media types, comma delimited. Audio, Video, Book, Photo.
         * @param {Array<GeneralCommandType>} [supportedCommands] A list of supported remote control commands, comma delimited.
         * @param {boolean} [supportsMediaControl] Determines whether media can be played remotely..
         * @param {boolean} [supportsSync] Determines whether sync is supported.
         * @param {boolean} [supportsPersistentIdentifier] Determines whether the device supports a unique identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCapabilities(id?: string, playableMediaTypes?: Array<string>, supportedCommands?: Array<GeneralCommandType>, supportsMediaControl?: boolean, supportsSync?: boolean, supportsPersistentIdentifier?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.postCapabilities(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates capabilities for a device.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The MediaBrowser.Model.Session.ClientCapabilities.
         * @param {string} [id] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFullCapabilities(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, id?: string, options?: any): AxiosPromise<void> {
            return localVarFp.postFullCapabilities(uNKNOWNBASETYPE, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes an additional user from a session.
         * @param {string} sessionId The session id.
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromSession(sessionId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeUserFromSession(sessionId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reports that a session has ended.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSessionEnded(options?: any): AxiosPromise<void> {
            return localVarFp.reportSessionEnded(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reports that a session is viewing an item.
         * @param {string} itemId The item id.
         * @param {string} [sessionId] The session id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportViewing(itemId: string, sessionId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.reportViewing(itemId, sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issues a full general command to a client.
         * @param {string} sessionId The session id.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The MediaBrowser.Model.Session.GeneralCommand.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFullGeneralCommand(sessionId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.sendFullGeneralCommand(sessionId, uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issues a general command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendGeneralCommand(sessionId: string, command: GeneralCommandType, options?: any): AxiosPromise<void> {
            return localVarFp.sendGeneralCommand(sessionId, command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issues a command to a client to display a message to the user.
         * @param {string} sessionId The session id.
         * @param {string} text The message test.
         * @param {string} [header] The message header.
         * @param {number} [timeoutMs] The message timeout. If omitted the user will have to confirm viewing the message.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessageCommand(sessionId: string, text: string, header?: string, timeoutMs?: number, options?: any): AxiosPromise<void> {
            return localVarFp.sendMessageCommand(sessionId, text, header, timeoutMs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issues a playstate command to a client.
         * @param {string} sessionId The session id.
         * @param {PlaystateCommand} command The MediaBrowser.Model.Session.PlaystateCommand.
         * @param {number} [seekPositionTicks] The optional position ticks.
         * @param {string} [controllingUserId] The optional controlling user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPlaystateCommand(sessionId: string, command: PlaystateCommand, seekPositionTicks?: number, controllingUserId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.sendPlaystateCommand(sessionId, command, seekPositionTicks, controllingUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issues a system command to a client.
         * @param {string} sessionId The session id.
         * @param {GeneralCommandType} command The command to send.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSystemCommand(sessionId: string, command: GeneralCommandType, options?: any): AxiosPromise<void> {
            return localVarFp.sendSystemCommand(sessionId, command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SessionApi - interface
 * @export
 * @interface SessionApi
 */
export interface SessionApiInterface {
    /**
     * 
     * @summary Adds an additional user to a session.
     * @param {string} sessionId The session id.
     * @param {string} userId The user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    addUserToSession(sessionId: string, userId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Instructs a session to browse to an item or view.
     * @param {string} sessionId The session Id.
     * @param {string} itemType The type of item to browse to.
     * @param {string} itemId The Id of the item.
     * @param {string} itemName The name of the item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    displayContent(sessionId: string, itemType: string, itemId: string, itemName: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get all auth providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    getAuthProviders(options?: any): AxiosPromise<Array<NameIdPair>>;

    /**
     * 
     * @summary Get all password reset providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    getPasswordResetProviders(options?: any): AxiosPromise<Array<NameIdPair>>;

    /**
     * 
     * @summary Gets a list of sessions.
     * @param {string} [controllableByUserId] Filter by sessions that a given user is allowed to remote control.
     * @param {string} [deviceId] Filter by device Id.
     * @param {number} [activeWithinSeconds] Optional. Filter by sessions that were active in the last n seconds.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    getSessions(controllableByUserId?: string, deviceId?: string, activeWithinSeconds?: number, options?: any): AxiosPromise<Array<SessionInfo>>;

    /**
     * 
     * @summary Instructs a session to play an item.
     * @param {string} sessionId The session id.
     * @param {PlayCommand} playCommand The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.
     * @param {Array<string>} itemIds The ids of the items to play, comma delimited.
     * @param {number} [startPositionTicks] The starting position of the first item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    play(sessionId: string, playCommand: PlayCommand, itemIds: Array<string>, startPositionTicks?: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Updates capabilities for a device.
     * @param {string} [id] The session id.
     * @param {Array<string>} [playableMediaTypes] A list of playable media types, comma delimited. Audio, Video, Book, Photo.
     * @param {Array<GeneralCommandType>} [supportedCommands] A list of supported remote control commands, comma delimited.
     * @param {boolean} [supportsMediaControl] Determines whether media can be played remotely..
     * @param {boolean} [supportsSync] Determines whether sync is supported.
     * @param {boolean} [supportsPersistentIdentifier] Determines whether the device supports a unique identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    postCapabilities(id?: string, playableMediaTypes?: Array<string>, supportedCommands?: Array<GeneralCommandType>, supportsMediaControl?: boolean, supportsSync?: boolean, supportsPersistentIdentifier?: boolean, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Updates capabilities for a device.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The MediaBrowser.Model.Session.ClientCapabilities.
     * @param {string} [id] The session id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    postFullCapabilities(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, id?: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Removes an additional user from a session.
     * @param {string} sessionId The session id.
     * @param {string} userId The user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    removeUserFromSession(sessionId: string, userId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Reports that a session has ended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    reportSessionEnded(options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Reports that a session is viewing an item.
     * @param {string} itemId The item id.
     * @param {string} [sessionId] The session id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    reportViewing(itemId: string, sessionId?: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Issues a full general command to a client.
     * @param {string} sessionId The session id.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The MediaBrowser.Model.Session.GeneralCommand.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    sendFullGeneralCommand(sessionId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Issues a general command to a client.
     * @param {string} sessionId The session id.
     * @param {GeneralCommandType} command The command to send.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    sendGeneralCommand(sessionId: string, command: GeneralCommandType, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Issues a command to a client to display a message to the user.
     * @param {string} sessionId The session id.
     * @param {string} text The message test.
     * @param {string} [header] The message header.
     * @param {number} [timeoutMs] The message timeout. If omitted the user will have to confirm viewing the message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    sendMessageCommand(sessionId: string, text: string, header?: string, timeoutMs?: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Issues a playstate command to a client.
     * @param {string} sessionId The session id.
     * @param {PlaystateCommand} command The MediaBrowser.Model.Session.PlaystateCommand.
     * @param {number} [seekPositionTicks] The optional position ticks.
     * @param {string} [controllingUserId] The optional controlling user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    sendPlaystateCommand(sessionId: string, command: PlaystateCommand, seekPositionTicks?: number, controllingUserId?: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Issues a system command to a client.
     * @param {string} sessionId The session id.
     * @param {GeneralCommandType} command The command to send.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    sendSystemCommand(sessionId: string, command: GeneralCommandType, options?: any): AxiosPromise<void>;

}

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI implements SessionApiInterface {
    /**
     * 
     * @summary Adds an additional user to a session.
     * @param {string} sessionId The session id.
     * @param {string} userId The user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public addUserToSession(sessionId: string, userId: string, options?: any) {
        return SessionApiFp(this.configuration).addUserToSession(sessionId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Instructs a session to browse to an item or view.
     * @param {string} sessionId The session Id.
     * @param {string} itemType The type of item to browse to.
     * @param {string} itemId The Id of the item.
     * @param {string} itemName The name of the item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public displayContent(sessionId: string, itemType: string, itemId: string, itemName: string, options?: any) {
        return SessionApiFp(this.configuration).displayContent(sessionId, itemType, itemId, itemName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all auth providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public getAuthProviders(options?: any) {
        return SessionApiFp(this.configuration).getAuthProviders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all password reset providers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public getPasswordResetProviders(options?: any) {
        return SessionApiFp(this.configuration).getPasswordResetProviders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of sessions.
     * @param {string} [controllableByUserId] Filter by sessions that a given user is allowed to remote control.
     * @param {string} [deviceId] Filter by device Id.
     * @param {number} [activeWithinSeconds] Optional. Filter by sessions that were active in the last n seconds.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public getSessions(controllableByUserId?: string, deviceId?: string, activeWithinSeconds?: number, options?: any) {
        return SessionApiFp(this.configuration).getSessions(controllableByUserId, deviceId, activeWithinSeconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Instructs a session to play an item.
     * @param {string} sessionId The session id.
     * @param {PlayCommand} playCommand The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now.
     * @param {Array<string>} itemIds The ids of the items to play, comma delimited.
     * @param {number} [startPositionTicks] The starting position of the first item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public play(sessionId: string, playCommand: PlayCommand, itemIds: Array<string>, startPositionTicks?: number, options?: any) {
        return SessionApiFp(this.configuration).play(sessionId, playCommand, itemIds, startPositionTicks, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates capabilities for a device.
     * @param {string} [id] The session id.
     * @param {Array<string>} [playableMediaTypes] A list of playable media types, comma delimited. Audio, Video, Book, Photo.
     * @param {Array<GeneralCommandType>} [supportedCommands] A list of supported remote control commands, comma delimited.
     * @param {boolean} [supportsMediaControl] Determines whether media can be played remotely..
     * @param {boolean} [supportsSync] Determines whether sync is supported.
     * @param {boolean} [supportsPersistentIdentifier] Determines whether the device supports a unique identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public postCapabilities(id?: string, playableMediaTypes?: Array<string>, supportedCommands?: Array<GeneralCommandType>, supportsMediaControl?: boolean, supportsSync?: boolean, supportsPersistentIdentifier?: boolean, options?: any) {
        return SessionApiFp(this.configuration).postCapabilities(id, playableMediaTypes, supportedCommands, supportsMediaControl, supportsSync, supportsPersistentIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates capabilities for a device.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The MediaBrowser.Model.Session.ClientCapabilities.
     * @param {string} [id] The session id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public postFullCapabilities(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, id?: string, options?: any) {
        return SessionApiFp(this.configuration).postFullCapabilities(uNKNOWNBASETYPE, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes an additional user from a session.
     * @param {string} sessionId The session id.
     * @param {string} userId The user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public removeUserFromSession(sessionId: string, userId: string, options?: any) {
        return SessionApiFp(this.configuration).removeUserFromSession(sessionId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reports that a session has ended.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public reportSessionEnded(options?: any) {
        return SessionApiFp(this.configuration).reportSessionEnded(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reports that a session is viewing an item.
     * @param {string} itemId The item id.
     * @param {string} [sessionId] The session id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public reportViewing(itemId: string, sessionId?: string, options?: any) {
        return SessionApiFp(this.configuration).reportViewing(itemId, sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issues a full general command to a client.
     * @param {string} sessionId The session id.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The MediaBrowser.Model.Session.GeneralCommand.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public sendFullGeneralCommand(sessionId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SessionApiFp(this.configuration).sendFullGeneralCommand(sessionId, uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issues a general command to a client.
     * @param {string} sessionId The session id.
     * @param {GeneralCommandType} command The command to send.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public sendGeneralCommand(sessionId: string, command: GeneralCommandType, options?: any) {
        return SessionApiFp(this.configuration).sendGeneralCommand(sessionId, command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issues a command to a client to display a message to the user.
     * @param {string} sessionId The session id.
     * @param {string} text The message test.
     * @param {string} [header] The message header.
     * @param {number} [timeoutMs] The message timeout. If omitted the user will have to confirm viewing the message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public sendMessageCommand(sessionId: string, text: string, header?: string, timeoutMs?: number, options?: any) {
        return SessionApiFp(this.configuration).sendMessageCommand(sessionId, text, header, timeoutMs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issues a playstate command to a client.
     * @param {string} sessionId The session id.
     * @param {PlaystateCommand} command The MediaBrowser.Model.Session.PlaystateCommand.
     * @param {number} [seekPositionTicks] The optional position ticks.
     * @param {string} [controllingUserId] The optional controlling user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public sendPlaystateCommand(sessionId: string, command: PlaystateCommand, seekPositionTicks?: number, controllingUserId?: string, options?: any) {
        return SessionApiFp(this.configuration).sendPlaystateCommand(sessionId, command, seekPositionTicks, controllingUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issues a system command to a client.
     * @param {string} sessionId The session id.
     * @param {GeneralCommandType} command The command to send.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public sendSystemCommand(sessionId: string, command: GeneralCommandType, options?: any) {
        return SessionApiFp(this.configuration).sendSystemCommand(sessionId, command, options).then((request) => request(this.axios, this.basePath));
    }
}
