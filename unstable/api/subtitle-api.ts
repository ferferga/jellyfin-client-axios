/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FontFile } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { RemoteSubtitleInfo } from '../models';
// @ts-ignore
import { UNKNOWN_BASE_TYPE } from '../models';
// @ts-ignore
import { UploadSubtitleDto } from '../models';
/**
 * SubtitleApi - axios parameter creator
 * @export
 */
export const SubtitleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes an external subtitle file.
         * @param {string} itemId The item id.
         * @param {number} index The index of the subtitle file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubtitle: async (itemId: string, index: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('deleteSubtitle', 'itemId', itemId)
            // verify required parameter 'index' is not null or undefined
            assertParamExists('deleteSubtitle', 'index', index)
            const localVarPath = `/Videos/{itemId}/Subtitles/{index}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"index"}}`, encodeURIComponent(String(index)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Downloads a remote subtitle.
         * @param {string} itemId The item id.
         * @param {string} subtitleId The subtitle id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemoteSubtitles: async (itemId: string, subtitleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('downloadRemoteSubtitles', 'itemId', itemId)
            // verify required parameter 'subtitleId' is not null or undefined
            assertParamExists('downloadRemoteSubtitles', 'subtitleId', subtitleId)
            const localVarPath = `/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"subtitleId"}}`, encodeURIComponent(String(subtitleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a fallback font file.
         * @param {string} name The name of the fallback font file to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFallbackFont: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getFallbackFont', 'name', name)
            const localVarPath = `/FallbackFont/Fonts/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of available fallback font files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFallbackFontList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/FallbackFont/Fonts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the remote subtitles.
         * @param {string} id The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteSubtitles: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRemoteSubtitles', 'id', id)
            const localVarPath = `/Providers/Subtitles/Subtitles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets subtitles in a specified format.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media source id.
         * @param {number} index The subtitle stream index.
         * @param {string} format The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {number} [startPositionTicks] Optional. The start position of the subtitle in ticks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitle: async (itemId: string, mediaSourceId: string, index: number, format: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, startPositionTicks?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getSubtitle', 'itemId', itemId)
            // verify required parameter 'mediaSourceId' is not null or undefined
            assertParamExists('getSubtitle', 'mediaSourceId', mediaSourceId)
            // verify required parameter 'index' is not null or undefined
            assertParamExists('getSubtitle', 'index', index)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('getSubtitle', 'format', format)
            const localVarPath = `/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/Stream.{format}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"mediaSourceId"}}`, encodeURIComponent(String(mediaSourceId)))
                .replace(`{${"index"}}`, encodeURIComponent(String(index)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endPositionTicks !== undefined) {
                localVarQueryParameter['endPositionTicks'] = endPositionTicks;
            }

            if (copyTimestamps !== undefined) {
                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
            }

            if (addVttTimeMap !== undefined) {
                localVarQueryParameter['addVttTimeMap'] = addVttTimeMap;
            }

            if (startPositionTicks !== undefined) {
                localVarQueryParameter['startPositionTicks'] = startPositionTicks;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an HLS subtitle playlist.
         * @param {string} itemId The item id.
         * @param {number} index The subtitle stream index.
         * @param {string} mediaSourceId The media source id.
         * @param {number} segmentLength The subtitle segment length.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitlePlaylist: async (itemId: string, index: number, mediaSourceId: string, segmentLength: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getSubtitlePlaylist', 'itemId', itemId)
            // verify required parameter 'index' is not null or undefined
            assertParamExists('getSubtitlePlaylist', 'index', index)
            // verify required parameter 'mediaSourceId' is not null or undefined
            assertParamExists('getSubtitlePlaylist', 'mediaSourceId', mediaSourceId)
            // verify required parameter 'segmentLength' is not null or undefined
            assertParamExists('getSubtitlePlaylist', 'segmentLength', segmentLength)
            const localVarPath = `/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"index"}}`, encodeURIComponent(String(index)))
                .replace(`{${"mediaSourceId"}}`, encodeURIComponent(String(mediaSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (segmentLength !== undefined) {
                localVarQueryParameter['segmentLength'] = segmentLength;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets subtitles in a specified format.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media source id.
         * @param {number} index The subtitle stream index.
         * @param {number} startPositionTicks Optional. The start position of the subtitle in ticks.
         * @param {string} format The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitleWithTicks: async (itemId: string, mediaSourceId: string, index: number, startPositionTicks: number, format: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getSubtitleWithTicks', 'itemId', itemId)
            // verify required parameter 'mediaSourceId' is not null or undefined
            assertParamExists('getSubtitleWithTicks', 'mediaSourceId', mediaSourceId)
            // verify required parameter 'index' is not null or undefined
            assertParamExists('getSubtitleWithTicks', 'index', index)
            // verify required parameter 'startPositionTicks' is not null or undefined
            assertParamExists('getSubtitleWithTicks', 'startPositionTicks', startPositionTicks)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('getSubtitleWithTicks', 'format', format)
            const localVarPath = `/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/{startPositionTicks}/Stream.{format}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"mediaSourceId"}}`, encodeURIComponent(String(mediaSourceId)))
                .replace(`{${"index"}}`, encodeURIComponent(String(index)))
                .replace(`{${"startPositionTicks"}}`, encodeURIComponent(String(startPositionTicks)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endPositionTicks !== undefined) {
                localVarQueryParameter['endPositionTicks'] = endPositionTicks;
            }

            if (copyTimestamps !== undefined) {
                localVarQueryParameter['copyTimestamps'] = copyTimestamps;
            }

            if (addVttTimeMap !== undefined) {
                localVarQueryParameter['addVttTimeMap'] = addVttTimeMap;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search remote subtitles.
         * @param {string} itemId The item id.
         * @param {string} language The language of the subtitles.
         * @param {boolean} [isPerfectMatch] Optional. Only show subtitles which are a perfect match.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRemoteSubtitles: async (itemId: string, language: string, isPerfectMatch?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('searchRemoteSubtitles', 'itemId', itemId)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('searchRemoteSubtitles', 'language', language)
            const localVarPath = `/Items/{itemId}/RemoteSearch/Subtitles/{language}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)))
                .replace(`{${"language"}}`, encodeURIComponent(String(language)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (isPerfectMatch !== undefined) {
                localVarQueryParameter['isPerfectMatch'] = isPerfectMatch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload an external subtitle file.
         * @param {string} itemId The item the subtitle belongs to.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSubtitle: async (itemId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('uploadSubtitle', 'itemId', itemId)
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('uploadSubtitle', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/Videos/{itemId}/Subtitles`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubtitleApi - functional programming interface
 * @export
 */
export const SubtitleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubtitleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes an external subtitle file.
         * @param {string} itemId The item id.
         * @param {number} index The index of the subtitle file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubtitle(itemId: string, index: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubtitle(itemId, index, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Downloads a remote subtitle.
         * @param {string} itemId The item id.
         * @param {string} subtitleId The subtitle id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadRemoteSubtitles(itemId: string, subtitleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadRemoteSubtitles(itemId, subtitleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a fallback font file.
         * @param {string} name The name of the fallback font file to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFallbackFont(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFallbackFont(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a list of available fallback font files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFallbackFontList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FontFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFallbackFontList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the remote subtitles.
         * @param {string} id The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRemoteSubtitles(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRemoteSubtitles(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets subtitles in a specified format.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media source id.
         * @param {number} index The subtitle stream index.
         * @param {string} format The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {number} [startPositionTicks] Optional. The start position of the subtitle in ticks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubtitle(itemId: string, mediaSourceId: string, index: number, format: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, startPositionTicks?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubtitle(itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets an HLS subtitle playlist.
         * @param {string} itemId The item id.
         * @param {number} index The subtitle stream index.
         * @param {string} mediaSourceId The media source id.
         * @param {number} segmentLength The subtitle segment length.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubtitlePlaylist(itemId: string, index: number, mediaSourceId: string, segmentLength: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubtitlePlaylist(itemId, index, mediaSourceId, segmentLength, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets subtitles in a specified format.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media source id.
         * @param {number} index The subtitle stream index.
         * @param {number} startPositionTicks Optional. The start position of the subtitle in ticks.
         * @param {string} format The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubtitleWithTicks(itemId: string, mediaSourceId: string, index: number, startPositionTicks: number, format: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubtitleWithTicks(itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search remote subtitles.
         * @param {string} itemId The item id.
         * @param {string} language The language of the subtitles.
         * @param {boolean} [isPerfectMatch] Optional. Only show subtitles which are a perfect match.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchRemoteSubtitles(itemId: string, language: string, isPerfectMatch?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RemoteSubtitleInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchRemoteSubtitles(itemId, language, isPerfectMatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload an external subtitle file.
         * @param {string} itemId The item the subtitle belongs to.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadSubtitle(itemId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadSubtitle(itemId, uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubtitleApi - factory interface
 * @export
 */
export const SubtitleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubtitleApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes an external subtitle file.
         * @param {string} itemId The item id.
         * @param {number} index The index of the subtitle file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubtitle(itemId: string, index: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSubtitle(itemId, index, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Downloads a remote subtitle.
         * @param {string} itemId The item id.
         * @param {string} subtitleId The subtitle id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemoteSubtitles(itemId: string, subtitleId: string, options?: any): AxiosPromise<void> {
            return localVarFp.downloadRemoteSubtitles(itemId, subtitleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a fallback font file.
         * @param {string} name The name of the fallback font file to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFallbackFont(name: string, options?: any): AxiosPromise<any> {
            return localVarFp.getFallbackFont(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a list of available fallback font files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFallbackFontList(options?: any): AxiosPromise<Array<FontFile>> {
            return localVarFp.getFallbackFontList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the remote subtitles.
         * @param {string} id The item id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRemoteSubtitles(id: string, options?: any): AxiosPromise<any> {
            return localVarFp.getRemoteSubtitles(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets subtitles in a specified format.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media source id.
         * @param {number} index The subtitle stream index.
         * @param {string} format The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {number} [startPositionTicks] Optional. The start position of the subtitle in ticks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitle(itemId: string, mediaSourceId: string, index: number, format: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, startPositionTicks?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getSubtitle(itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets an HLS subtitle playlist.
         * @param {string} itemId The item id.
         * @param {number} index The subtitle stream index.
         * @param {string} mediaSourceId The media source id.
         * @param {number} segmentLength The subtitle segment length.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitlePlaylist(itemId: string, index: number, mediaSourceId: string, segmentLength: number, options?: any): AxiosPromise<any> {
            return localVarFp.getSubtitlePlaylist(itemId, index, mediaSourceId, segmentLength, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets subtitles in a specified format.
         * @param {string} itemId The item id.
         * @param {string} mediaSourceId The media source id.
         * @param {number} index The subtitle stream index.
         * @param {number} startPositionTicks Optional. The start position of the subtitle in ticks.
         * @param {string} format The format of the returned subtitle.
         * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
         * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
         * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtitleWithTicks(itemId: string, mediaSourceId: string, index: number, startPositionTicks: number, format: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.getSubtitleWithTicks(itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search remote subtitles.
         * @param {string} itemId The item id.
         * @param {string} language The language of the subtitles.
         * @param {boolean} [isPerfectMatch] Optional. Only show subtitles which are a perfect match.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRemoteSubtitles(itemId: string, language: string, isPerfectMatch?: boolean, options?: any): AxiosPromise<Array<RemoteSubtitleInfo>> {
            return localVarFp.searchRemoteSubtitles(itemId, language, isPerfectMatch, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload an external subtitle file.
         * @param {string} itemId The item the subtitle belongs to.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The request body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadSubtitle(itemId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.uploadSubtitle(itemId, uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubtitleApi - interface
 * @export
 * @interface SubtitleApi
 */
export interface SubtitleApiInterface {
    /**
     * 
     * @summary Deletes an external subtitle file.
     * @param {string} itemId The item id.
     * @param {number} index The index of the subtitle file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApiInterface
     */
    deleteSubtitle(itemId: string, index: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Downloads a remote subtitle.
     * @param {string} itemId The item id.
     * @param {string} subtitleId The subtitle id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApiInterface
     */
    downloadRemoteSubtitles(itemId: string, subtitleId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Gets a fallback font file.
     * @param {string} name The name of the fallback font file to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApiInterface
     */
    getFallbackFont(name: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets a list of available fallback font files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApiInterface
     */
    getFallbackFontList(options?: any): AxiosPromise<Array<FontFile>>;

    /**
     * 
     * @summary Gets the remote subtitles.
     * @param {string} id The item id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApiInterface
     */
    getRemoteSubtitles(id: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets subtitles in a specified format.
     * @param {string} itemId The item id.
     * @param {string} mediaSourceId The media source id.
     * @param {number} index The subtitle stream index.
     * @param {string} format The format of the returned subtitle.
     * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
     * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
     * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
     * @param {number} [startPositionTicks] Optional. The start position of the subtitle in ticks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApiInterface
     */
    getSubtitle(itemId: string, mediaSourceId: string, index: number, format: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, startPositionTicks?: number, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets an HLS subtitle playlist.
     * @param {string} itemId The item id.
     * @param {number} index The subtitle stream index.
     * @param {string} mediaSourceId The media source id.
     * @param {number} segmentLength The subtitle segment length.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApiInterface
     */
    getSubtitlePlaylist(itemId: string, index: number, mediaSourceId: string, segmentLength: number, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets subtitles in a specified format.
     * @param {string} itemId The item id.
     * @param {string} mediaSourceId The media source id.
     * @param {number} index The subtitle stream index.
     * @param {number} startPositionTicks Optional. The start position of the subtitle in ticks.
     * @param {string} format The format of the returned subtitle.
     * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
     * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
     * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApiInterface
     */
    getSubtitleWithTicks(itemId: string, mediaSourceId: string, index: number, startPositionTicks: number, format: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Search remote subtitles.
     * @param {string} itemId The item id.
     * @param {string} language The language of the subtitles.
     * @param {boolean} [isPerfectMatch] Optional. Only show subtitles which are a perfect match.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApiInterface
     */
    searchRemoteSubtitles(itemId: string, language: string, isPerfectMatch?: boolean, options?: any): AxiosPromise<Array<RemoteSubtitleInfo>>;

    /**
     * 
     * @summary Upload an external subtitle file.
     * @param {string} itemId The item the subtitle belongs to.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The request body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApiInterface
     */
    uploadSubtitle(itemId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

}

/**
 * SubtitleApi - object-oriented interface
 * @export
 * @class SubtitleApi
 * @extends {BaseAPI}
 */
export class SubtitleApi extends BaseAPI implements SubtitleApiInterface {
    /**
     * 
     * @summary Deletes an external subtitle file.
     * @param {string} itemId The item id.
     * @param {number} index The index of the subtitle file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    public deleteSubtitle(itemId: string, index: number, options?: any) {
        return SubtitleApiFp(this.configuration).deleteSubtitle(itemId, index, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Downloads a remote subtitle.
     * @param {string} itemId The item id.
     * @param {string} subtitleId The subtitle id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    public downloadRemoteSubtitles(itemId: string, subtitleId: string, options?: any) {
        return SubtitleApiFp(this.configuration).downloadRemoteSubtitles(itemId, subtitleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a fallback font file.
     * @param {string} name The name of the fallback font file to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    public getFallbackFont(name: string, options?: any) {
        return SubtitleApiFp(this.configuration).getFallbackFont(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a list of available fallback font files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    public getFallbackFontList(options?: any) {
        return SubtitleApiFp(this.configuration).getFallbackFontList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the remote subtitles.
     * @param {string} id The item id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    public getRemoteSubtitles(id: string, options?: any) {
        return SubtitleApiFp(this.configuration).getRemoteSubtitles(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets subtitles in a specified format.
     * @param {string} itemId The item id.
     * @param {string} mediaSourceId The media source id.
     * @param {number} index The subtitle stream index.
     * @param {string} format The format of the returned subtitle.
     * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
     * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
     * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
     * @param {number} [startPositionTicks] Optional. The start position of the subtitle in ticks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    public getSubtitle(itemId: string, mediaSourceId: string, index: number, format: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, startPositionTicks?: number, options?: any) {
        return SubtitleApiFp(this.configuration).getSubtitle(itemId, mediaSourceId, index, format, endPositionTicks, copyTimestamps, addVttTimeMap, startPositionTicks, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets an HLS subtitle playlist.
     * @param {string} itemId The item id.
     * @param {number} index The subtitle stream index.
     * @param {string} mediaSourceId The media source id.
     * @param {number} segmentLength The subtitle segment length.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    public getSubtitlePlaylist(itemId: string, index: number, mediaSourceId: string, segmentLength: number, options?: any) {
        return SubtitleApiFp(this.configuration).getSubtitlePlaylist(itemId, index, mediaSourceId, segmentLength, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets subtitles in a specified format.
     * @param {string} itemId The item id.
     * @param {string} mediaSourceId The media source id.
     * @param {number} index The subtitle stream index.
     * @param {number} startPositionTicks Optional. The start position of the subtitle in ticks.
     * @param {string} format The format of the returned subtitle.
     * @param {number} [endPositionTicks] Optional. The end position of the subtitle in ticks.
     * @param {boolean} [copyTimestamps] Optional. Whether to copy the timestamps.
     * @param {boolean} [addVttTimeMap] Optional. Whether to add a VTT time map.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    public getSubtitleWithTicks(itemId: string, mediaSourceId: string, index: number, startPositionTicks: number, format: string, endPositionTicks?: number, copyTimestamps?: boolean, addVttTimeMap?: boolean, options?: any) {
        return SubtitleApiFp(this.configuration).getSubtitleWithTicks(itemId, mediaSourceId, index, startPositionTicks, format, endPositionTicks, copyTimestamps, addVttTimeMap, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search remote subtitles.
     * @param {string} itemId The item id.
     * @param {string} language The language of the subtitles.
     * @param {boolean} [isPerfectMatch] Optional. Only show subtitles which are a perfect match.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    public searchRemoteSubtitles(itemId: string, language: string, isPerfectMatch?: boolean, options?: any) {
        return SubtitleApiFp(this.configuration).searchRemoteSubtitles(itemId, language, isPerfectMatch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload an external subtitle file.
     * @param {string} itemId The item the subtitle belongs to.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The request body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubtitleApi
     */
    public uploadSubtitle(itemId: string, uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SubtitleApiFp(this.configuration).uploadSubtitle(itemId, uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }
}
