/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProblemDetails } from '../models';
/**
 * DlnaServerApi - axios parameter creator
 * @export
 */
export const DlnaServerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getConnectionManager', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/ConnectionManager`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager2: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getConnectionManager2', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/ConnectionManager/ConnectionManager`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager3: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getConnectionManager3', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getContentDirectory', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/ContentDirectory`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory2: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getContentDirectory2', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/ContentDirectory/ContentDirectory`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory3: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getContentDirectory3', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescriptionXml: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getDescriptionXml', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/description`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescriptionXml2: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getDescriptionXml2', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/description.xml`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a server icon.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcon: async (fileName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('getIcon', 'fileName', fileName)
            const localVarPath = `/Dlna/icons/{fileName}`
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a server icon.
         * @param {string} serverId Server UUID.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIconId: async (serverId: string, fileName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getIconId', 'serverId', serverId)
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('getIconId', 'fileName', fileName)
            const localVarPath = `/Dlna/{serverId}/icons/{fileName}`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)))
                .replace(`{${"fileName"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getMediaReceiverRegistrar', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/MediaReceiverRegistrar`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar2: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getMediaReceiverRegistrar2', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar3: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getMediaReceiverRegistrar3', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process a connection manager control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processConnectionManagerControlRequest: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('processConnectionManagerControlRequest', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/ConnectionManager/Control`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process a content directory control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processContentDirectoryControlRequest: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('processContentDirectoryControlRequest', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/ContentDirectory/Control`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process a media receiver registrar control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processMediaReceiverRegistrarControlRequest: async (serverId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('processMediaReceiverRegistrarControlRequest', 'serverId', serverId)
            const localVarPath = `/Dlna/{serverId}/MediaReceiverRegistrar/Control`
                .replace(`{${"serverId"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DlnaServerApi - functional programming interface
 * @export
 */
export const DlnaServerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DlnaServerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectionManager(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectionManager(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectionManager2(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectionManager2(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectionManager3(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectionManager3(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentDirectory(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentDirectory(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentDirectory2(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentDirectory2(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentDirectory3(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentDirectory3(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDescriptionXml(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDescriptionXml(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDescriptionXml2(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDescriptionXml2(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a server icon.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIcon(fileName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIcon(fileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a server icon.
         * @param {string} serverId Server UUID.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIconId(serverId: string, fileName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIconId(serverId, fileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaReceiverRegistrar(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaReceiverRegistrar(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaReceiverRegistrar2(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaReceiverRegistrar2(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaReceiverRegistrar3(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaReceiverRegistrar3(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process a connection manager control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processConnectionManagerControlRequest(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processConnectionManagerControlRequest(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process a content directory control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processContentDirectoryControlRequest(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processContentDirectoryControlRequest(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process a media receiver registrar control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processMediaReceiverRegistrarControlRequest(serverId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processMediaReceiverRegistrarControlRequest(serverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DlnaServerApi - factory interface
 * @export
 */
export const DlnaServerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DlnaServerApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getConnectionManager(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager2(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getConnectionManager2(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectionManager3(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getConnectionManager3(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getContentDirectory(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory2(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getContentDirectory2(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Dlna content directory xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDirectory3(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getContentDirectory3(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescriptionXml(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getDescriptionXml(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Description Xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDescriptionXml2(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getDescriptionXml2(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a server icon.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIcon(fileName: string, options?: any): AxiosPromise<any> {
            return localVarFp.getIcon(fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a server icon.
         * @param {string} serverId Server UUID.
         * @param {string} fileName The icon filename.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIconId(serverId: string, fileName: string, options?: any): AxiosPromise<any> {
            return localVarFp.getIconId(serverId, fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getMediaReceiverRegistrar(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar2(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getMediaReceiverRegistrar2(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets Dlna media receiver registrar xml.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaReceiverRegistrar3(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getMediaReceiverRegistrar3(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process a connection manager control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processConnectionManagerControlRequest(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.processConnectionManagerControlRequest(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process a content directory control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processContentDirectoryControlRequest(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.processContentDirectoryControlRequest(serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process a media receiver registrar control request.
         * @param {string} serverId Server UUID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processMediaReceiverRegistrarControlRequest(serverId: string, options?: any): AxiosPromise<any> {
            return localVarFp.processMediaReceiverRegistrarControlRequest(serverId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DlnaServerApi - interface
 * @export
 * @interface DlnaServerApi
 */
export interface DlnaServerApiInterface {
    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getConnectionManager(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getConnectionManager2(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getConnectionManager3(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets Dlna content directory xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getContentDirectory(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets Dlna content directory xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getContentDirectory2(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets Dlna content directory xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getContentDirectory3(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Get Description Xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getDescriptionXml(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Get Description Xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getDescriptionXml2(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets a server icon.
     * @param {string} fileName The icon filename.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getIcon(fileName: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets a server icon.
     * @param {string} serverId Server UUID.
     * @param {string} fileName The icon filename.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getIconId(serverId: string, fileName: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getMediaReceiverRegistrar(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getMediaReceiverRegistrar2(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    getMediaReceiverRegistrar3(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Process a connection manager control request.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    processConnectionManagerControlRequest(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Process a content directory control request.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    processContentDirectoryControlRequest(serverId: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Process a media receiver registrar control request.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApiInterface
     */
    processMediaReceiverRegistrarControlRequest(serverId: string, options?: any): AxiosPromise<any>;

}

/**
 * DlnaServerApi - object-oriented interface
 * @export
 * @class DlnaServerApi
 * @extends {BaseAPI}
 */
export class DlnaServerApi extends BaseAPI implements DlnaServerApiInterface {
    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getConnectionManager(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getConnectionManager(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getConnectionManager2(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getConnectionManager2(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getConnectionManager3(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getConnectionManager3(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Dlna content directory xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getContentDirectory(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getContentDirectory(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Dlna content directory xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getContentDirectory2(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getContentDirectory2(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Dlna content directory xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getContentDirectory3(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getContentDirectory3(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Description Xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getDescriptionXml(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getDescriptionXml(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Description Xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getDescriptionXml2(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getDescriptionXml2(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a server icon.
     * @param {string} fileName The icon filename.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getIcon(fileName: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getIcon(fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a server icon.
     * @param {string} serverId Server UUID.
     * @param {string} fileName The icon filename.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getIconId(serverId: string, fileName: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getIconId(serverId, fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getMediaReceiverRegistrar(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getMediaReceiverRegistrar(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getMediaReceiverRegistrar2(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getMediaReceiverRegistrar2(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets Dlna media receiver registrar xml.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public getMediaReceiverRegistrar3(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).getMediaReceiverRegistrar3(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process a connection manager control request.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public processConnectionManagerControlRequest(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).processConnectionManagerControlRequest(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process a content directory control request.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public processContentDirectoryControlRequest(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).processContentDirectoryControlRequest(serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process a media receiver registrar control request.
     * @param {string} serverId Server UUID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DlnaServerApi
     */
    public processMediaReceiverRegistrarControlRequest(serverId: string, options?: any) {
        return DlnaServerApiFp(this.configuration).processMediaReceiverRegistrarControlRequest(serverId, options).then((request) => request(this.axios, this.basePath));
    }
}
