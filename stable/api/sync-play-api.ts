/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.7.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BufferRequestDto } from '../models';
// @ts-ignore
import { GroupInfoDto } from '../models';
// @ts-ignore
import { IgnoreWaitRequestDto } from '../models';
// @ts-ignore
import { JoinGroupRequestDto } from '../models';
// @ts-ignore
import { MovePlaylistItemRequestDto } from '../models';
// @ts-ignore
import { NewGroupRequestDto } from '../models';
// @ts-ignore
import { NextItemRequestDto } from '../models';
// @ts-ignore
import { PingRequestDto } from '../models';
// @ts-ignore
import { PlayRequestDto } from '../models';
// @ts-ignore
import { PreviousItemRequestDto } from '../models';
// @ts-ignore
import { QueueRequestDto } from '../models';
// @ts-ignore
import { ReadyRequestDto } from '../models';
// @ts-ignore
import { RemoveFromPlaylistRequestDto } from '../models';
// @ts-ignore
import { SeekRequestDto } from '../models';
// @ts-ignore
import { SetPlaylistItemRequestDto } from '../models';
// @ts-ignore
import { SetRepeatModeRequestDto } from '../models';
// @ts-ignore
import { SetShuffleModeRequestDto } from '../models';
// @ts-ignore
import { UNKNOWN_BASE_TYPE } from '../models';
/**
 * SyncPlayApi - axios parameter creator
 * @export
 */
export const SyncPlayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Notify SyncPlay group that member is buffering.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayBuffering: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlayBuffering', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/Buffering`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The settings of the new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayCreateGroup: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlayCreateGroup', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/New`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all SyncPlay groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayGetGroups: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SyncPlay/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join an existing SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The group to join.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayJoinGroup: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlayJoinGroup', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/Join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave the joined SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayLeaveGroup: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SyncPlay/Leave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to move an item in the playlist in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new position for the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayMovePlaylistItem: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlayMovePlaylistItem', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/MovePlaylistItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request next item in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayNextItem: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlayNextItem', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/NextItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request pause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPause: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SyncPlay/Pause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update session ping.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new ping.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPing: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlayPing', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/Ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request previous item in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPreviousItem: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlayPreviousItem', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/PreviousItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to queue items to the playlist of a SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The items to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayQueue: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlayQueue', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/Queue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Notify SyncPlay group that member is ready for playback.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayReady: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlayReady', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/Ready`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to remove items from the playlist in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The items to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayRemoveFromPlaylist: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlayRemoveFromPlaylist', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/RemoveFromPlaylist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request seek in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new playback position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySeek: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlaySeek', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/Seek`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request SyncPlay group to ignore member during group-wait.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The settings to set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetIgnoreWait: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlaySetIgnoreWait', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/SetIgnoreWait`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to set new playlist in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new playlist to play in the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetNewQueue: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlaySetNewQueue', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/SetNewQueue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to change playlist item in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new item to play.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetPlaylistItem: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlaySetPlaylistItem', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/SetPlaylistItem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to set repeat mode in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new repeat mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetRepeatMode: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlaySetRepeatMode', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/SetRepeatMode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to set shuffle mode in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new shuffle mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetShuffleMode: async (uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uNKNOWNBASETYPE' is not null or undefined
            assertParamExists('syncPlaySetShuffleMode', 'uNKNOWNBASETYPE', uNKNOWNBASETYPE)
            const localVarPath = `/SyncPlay/SetShuffleMode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uNKNOWNBASETYPE, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request stop in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayStop: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SyncPlay/Stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request unpause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayUnpause: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SyncPlay/Unpause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncPlayApi - functional programming interface
 * @export
 */
export const SyncPlayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncPlayApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Notify SyncPlay group that member is buffering.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayBuffering(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayBuffering(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The settings of the new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayCreateGroup(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayCreateGroup(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets all SyncPlay groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayGetGroups(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupInfoDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayGetGroups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Join an existing SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The group to join.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayJoinGroup(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayJoinGroup(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Leave the joined SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayLeaveGroup(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayLeaveGroup(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request to move an item in the playlist in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new position for the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayMovePlaylistItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayMovePlaylistItem(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request next item in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayNextItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayNextItem(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request pause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayPause(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayPause(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update session ping.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new ping.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayPing(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayPing(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request previous item in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayPreviousItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayPreviousItem(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request to queue items to the playlist of a SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The items to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayQueue(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayQueue(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Notify SyncPlay group that member is ready for playback.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayReady(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayReady(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request to remove items from the playlist in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The items to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayRemoveFromPlaylist(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayRemoveFromPlaylist(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request seek in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new playback position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySeek(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySeek(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request SyncPlay group to ignore member during group-wait.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The settings to set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySetIgnoreWait(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySetIgnoreWait(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request to set new playlist in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new playlist to play in the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySetNewQueue(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySetNewQueue(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request to change playlist item in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new item to play.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySetPlaylistItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySetPlaylistItem(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request to set repeat mode in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new repeat mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySetRepeatMode(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySetRepeatMode(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request to set shuffle mode in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new shuffle mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlaySetShuffleMode(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlaySetShuffleMode(uNKNOWNBASETYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request stop in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayStop(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayStop(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request unpause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncPlayUnpause(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncPlayUnpause(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SyncPlayApi - factory interface
 * @export
 */
export const SyncPlayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncPlayApiFp(configuration)
    return {
        /**
         * 
         * @summary Notify SyncPlay group that member is buffering.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayBuffering(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayBuffering(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The settings of the new group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayCreateGroup(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayCreateGroup(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets all SyncPlay groups.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayGetGroups(options?: any): AxiosPromise<Array<GroupInfoDto>> {
            return localVarFp.syncPlayGetGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Join an existing SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The group to join.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayJoinGroup(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayJoinGroup(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leave the joined SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayLeaveGroup(options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayLeaveGroup(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to move an item in the playlist in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new position for the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayMovePlaylistItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayMovePlaylistItem(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request next item in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayNextItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayNextItem(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request pause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPause(options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayPause(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update session ping.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new ping.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPing(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayPing(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request previous item in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The current item information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayPreviousItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayPreviousItem(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to queue items to the playlist of a SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The items to add.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayQueue(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayQueue(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Notify SyncPlay group that member is ready for playback.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The player status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayReady(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayReady(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to remove items from the playlist in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The items to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayRemoveFromPlaylist(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayRemoveFromPlaylist(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request seek in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new playback position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySeek(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlaySeek(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request SyncPlay group to ignore member during group-wait.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The settings to set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetIgnoreWait(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlaySetIgnoreWait(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to set new playlist in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new playlist to play in the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetNewQueue(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlaySetNewQueue(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to change playlist item in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new item to play.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetPlaylistItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlaySetPlaylistItem(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to set repeat mode in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new repeat mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetRepeatMode(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlaySetRepeatMode(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to set shuffle mode in SyncPlay group.
         * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new shuffle mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlaySetShuffleMode(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void> {
            return localVarFp.syncPlaySetShuffleMode(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request stop in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayStop(options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayStop(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request unpause in SyncPlay group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncPlayUnpause(options?: any): AxiosPromise<void> {
            return localVarFp.syncPlayUnpause(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SyncPlayApi - interface
 * @export
 * @interface SyncPlayApi
 */
export interface SyncPlayApiInterface {
    /**
     * 
     * @summary Notify SyncPlay group that member is buffering.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The player status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayBuffering(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Create a new SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The settings of the new group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayCreateGroup(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Gets all SyncPlay groups.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayGetGroups(options?: any): AxiosPromise<Array<GroupInfoDto>>;

    /**
     * 
     * @summary Join an existing SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The group to join.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayJoinGroup(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Leave the joined SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayLeaveGroup(options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request to move an item in the playlist in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new position for the item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayMovePlaylistItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request next item in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The current item information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayNextItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request pause in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayPause(options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Update session ping.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayPing(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request previous item in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The current item information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayPreviousItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request to queue items to the playlist of a SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The items to add.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayQueue(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Notify SyncPlay group that member is ready for playback.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The player status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayReady(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request to remove items from the playlist in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The items to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayRemoveFromPlaylist(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request seek in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new playback position.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlaySeek(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request SyncPlay group to ignore member during group-wait.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The settings to set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlaySetIgnoreWait(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request to set new playlist in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new playlist to play in the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlaySetNewQueue(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request to change playlist item in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new item to play.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlaySetPlaylistItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request to set repeat mode in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new repeat mode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlaySetRepeatMode(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request to set shuffle mode in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new shuffle mode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlaySetShuffleMode(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request stop in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayStop(options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Request unpause in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApiInterface
     */
    syncPlayUnpause(options?: any): AxiosPromise<void>;

}

/**
 * SyncPlayApi - object-oriented interface
 * @export
 * @class SyncPlayApi
 * @extends {BaseAPI}
 */
export class SyncPlayApi extends BaseAPI implements SyncPlayApiInterface {
    /**
     * 
     * @summary Notify SyncPlay group that member is buffering.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The player status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayBuffering(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayBuffering(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The settings of the new group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayCreateGroup(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayCreateGroup(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets all SyncPlay groups.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayGetGroups(options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayGetGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Join an existing SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The group to join.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayJoinGroup(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayJoinGroup(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leave the joined SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayLeaveGroup(options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayLeaveGroup(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to move an item in the playlist in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new position for the item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayMovePlaylistItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayMovePlaylistItem(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request next item in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The current item information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayNextItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayNextItem(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request pause in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayPause(options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayPause(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update session ping.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayPing(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayPing(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request previous item in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The current item information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayPreviousItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayPreviousItem(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to queue items to the playlist of a SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The items to add.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayQueue(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayQueue(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Notify SyncPlay group that member is ready for playback.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The player status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayReady(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayReady(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to remove items from the playlist in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The items to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayRemoveFromPlaylist(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayRemoveFromPlaylist(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request seek in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new playback position.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySeek(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlaySeek(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request SyncPlay group to ignore member during group-wait.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The settings to set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySetIgnoreWait(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlaySetIgnoreWait(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to set new playlist in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new playlist to play in the group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySetNewQueue(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlaySetNewQueue(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to change playlist item in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new item to play.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySetPlaylistItem(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlaySetPlaylistItem(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to set repeat mode in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new repeat mode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySetRepeatMode(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlaySetRepeatMode(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to set shuffle mode in SyncPlay group.
     * @param {UNKNOWN_BASE_TYPE} uNKNOWNBASETYPE The new shuffle mode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlaySetShuffleMode(uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE, options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlaySetShuffleMode(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request stop in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayStop(options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayStop(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request unpause in SyncPlay group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncPlayApi
     */
    public syncPlayUnpause(options?: any) {
        return SyncPlayApiFp(this.configuration).syncPlayUnpause(options).then((request) => request(this.axios, this.basePath));
    }
}
