/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SearchHintResult } from '../models';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the search hint result.
         * @param {string} searchTerm The search term to filter on.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [userId] Optional. Supply a user id to search within a user\&#39;s library or omit to search all.
         * @param {Array<string>} [includeItemTypes] If specified, only results with the specified item types are returned. This allows multiple, comma delimeted.
         * @param {Array<string>} [excludeItemTypes] If specified, results with these item types are filtered out. This allows multiple, comma delimeted.
         * @param {Array<string>} [mediaTypes] If specified, only results with the specified media types are returned. This allows multiple, comma delimeted.
         * @param {string} [parentId] If specified, only children of the parent are returned.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for series.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {boolean} [includePeople] Optional filter whether to include people.
         * @param {boolean} [includeMedia] Optional filter whether to include media.
         * @param {boolean} [includeGenres] Optional filter whether to include genres.
         * @param {boolean} [includeStudios] Optional filter whether to include studios.
         * @param {boolean} [includeArtists] Optional filter whether to include artists.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (searchTerm: string, startIndex?: number, limit?: number, userId?: string, includeItemTypes?: Array<string>, excludeItemTypes?: Array<string>, mediaTypes?: Array<string>, parentId?: string, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, includePeople?: boolean, includeMedia?: boolean, includeGenres?: boolean, includeStudios?: boolean, includeArtists?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchTerm' is not null or undefined
            assertParamExists('get', 'searchTerm', searchTerm)
            const localVarPath = `/Search/Hints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomAuthentication required
            await setApiKeyToObject(localVarHeaderParameter, "X-Emby-Authorization", configuration)

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (searchTerm !== undefined) {
                localVarQueryParameter['searchTerm'] = searchTerm;
            }

            if (includeItemTypes) {
                localVarQueryParameter['includeItemTypes'] = includeItemTypes;
            }

            if (excludeItemTypes) {
                localVarQueryParameter['excludeItemTypes'] = excludeItemTypes;
            }

            if (mediaTypes) {
                localVarQueryParameter['mediaTypes'] = mediaTypes;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }

            if (isMovie !== undefined) {
                localVarQueryParameter['isMovie'] = isMovie;
            }

            if (isSeries !== undefined) {
                localVarQueryParameter['isSeries'] = isSeries;
            }

            if (isNews !== undefined) {
                localVarQueryParameter['isNews'] = isNews;
            }

            if (isKids !== undefined) {
                localVarQueryParameter['isKids'] = isKids;
            }

            if (isSports !== undefined) {
                localVarQueryParameter['isSports'] = isSports;
            }

            if (includePeople !== undefined) {
                localVarQueryParameter['includePeople'] = includePeople;
            }

            if (includeMedia !== undefined) {
                localVarQueryParameter['includeMedia'] = includeMedia;
            }

            if (includeGenres !== undefined) {
                localVarQueryParameter['includeGenres'] = includeGenres;
            }

            if (includeStudios !== undefined) {
                localVarQueryParameter['includeStudios'] = includeStudios;
            }

            if (includeArtists !== undefined) {
                localVarQueryParameter['includeArtists'] = includeArtists;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the search hint result.
         * @param {string} searchTerm The search term to filter on.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [userId] Optional. Supply a user id to search within a user\&#39;s library or omit to search all.
         * @param {Array<string>} [includeItemTypes] If specified, only results with the specified item types are returned. This allows multiple, comma delimeted.
         * @param {Array<string>} [excludeItemTypes] If specified, results with these item types are filtered out. This allows multiple, comma delimeted.
         * @param {Array<string>} [mediaTypes] If specified, only results with the specified media types are returned. This allows multiple, comma delimeted.
         * @param {string} [parentId] If specified, only children of the parent are returned.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for series.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {boolean} [includePeople] Optional filter whether to include people.
         * @param {boolean} [includeMedia] Optional filter whether to include media.
         * @param {boolean} [includeGenres] Optional filter whether to include genres.
         * @param {boolean} [includeStudios] Optional filter whether to include studios.
         * @param {boolean} [includeArtists] Optional filter whether to include artists.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(searchTerm: string, startIndex?: number, limit?: number, userId?: string, includeItemTypes?: Array<string>, excludeItemTypes?: Array<string>, mediaTypes?: Array<string>, parentId?: string, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, includePeople?: boolean, includeMedia?: boolean, includeGenres?: boolean, includeStudios?: boolean, includeArtists?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchHintResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the search hint result.
         * @param {string} searchTerm The search term to filter on.
         * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
         * @param {number} [limit] Optional. The maximum number of records to return.
         * @param {string} [userId] Optional. Supply a user id to search within a user\&#39;s library or omit to search all.
         * @param {Array<string>} [includeItemTypes] If specified, only results with the specified item types are returned. This allows multiple, comma delimeted.
         * @param {Array<string>} [excludeItemTypes] If specified, results with these item types are filtered out. This allows multiple, comma delimeted.
         * @param {Array<string>} [mediaTypes] If specified, only results with the specified media types are returned. This allows multiple, comma delimeted.
         * @param {string} [parentId] If specified, only children of the parent are returned.
         * @param {boolean} [isMovie] Optional filter for movies.
         * @param {boolean} [isSeries] Optional filter for series.
         * @param {boolean} [isNews] Optional filter for news.
         * @param {boolean} [isKids] Optional filter for kids.
         * @param {boolean} [isSports] Optional filter for sports.
         * @param {boolean} [includePeople] Optional filter whether to include people.
         * @param {boolean} [includeMedia] Optional filter whether to include media.
         * @param {boolean} [includeGenres] Optional filter whether to include genres.
         * @param {boolean} [includeStudios] Optional filter whether to include studios.
         * @param {boolean} [includeArtists] Optional filter whether to include artists.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(searchTerm: string, startIndex?: number, limit?: number, userId?: string, includeItemTypes?: Array<string>, excludeItemTypes?: Array<string>, mediaTypes?: Array<string>, parentId?: string, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, includePeople?: boolean, includeMedia?: boolean, includeGenres?: boolean, includeStudios?: boolean, includeArtists?: boolean, options?: any): AxiosPromise<SearchHintResult> {
            return localVarFp.get(searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - interface
 * @export
 * @interface SearchApi
 */
export interface SearchApiInterface {
    /**
     * 
     * @summary Gets the search hint result.
     * @param {string} searchTerm The search term to filter on.
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return.
     * @param {string} [userId] Optional. Supply a user id to search within a user\&#39;s library or omit to search all.
     * @param {Array<string>} [includeItemTypes] If specified, only results with the specified item types are returned. This allows multiple, comma delimeted.
     * @param {Array<string>} [excludeItemTypes] If specified, results with these item types are filtered out. This allows multiple, comma delimeted.
     * @param {Array<string>} [mediaTypes] If specified, only results with the specified media types are returned. This allows multiple, comma delimeted.
     * @param {string} [parentId] If specified, only children of the parent are returned.
     * @param {boolean} [isMovie] Optional filter for movies.
     * @param {boolean} [isSeries] Optional filter for series.
     * @param {boolean} [isNews] Optional filter for news.
     * @param {boolean} [isKids] Optional filter for kids.
     * @param {boolean} [isSports] Optional filter for sports.
     * @param {boolean} [includePeople] Optional filter whether to include people.
     * @param {boolean} [includeMedia] Optional filter whether to include media.
     * @param {boolean} [includeGenres] Optional filter whether to include genres.
     * @param {boolean} [includeStudios] Optional filter whether to include studios.
     * @param {boolean} [includeArtists] Optional filter whether to include artists.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    get(searchTerm: string, startIndex?: number, limit?: number, userId?: string, includeItemTypes?: Array<string>, excludeItemTypes?: Array<string>, mediaTypes?: Array<string>, parentId?: string, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, includePeople?: boolean, includeMedia?: boolean, includeGenres?: boolean, includeStudios?: boolean, includeArtists?: boolean, options?: any): AxiosPromise<SearchHintResult>;

}

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI implements SearchApiInterface {
    /**
     * 
     * @summary Gets the search hint result.
     * @param {string} searchTerm The search term to filter on.
     * @param {number} [startIndex] Optional. The record index to start at. All items with a lower index will be dropped from the results.
     * @param {number} [limit] Optional. The maximum number of records to return.
     * @param {string} [userId] Optional. Supply a user id to search within a user\&#39;s library or omit to search all.
     * @param {Array<string>} [includeItemTypes] If specified, only results with the specified item types are returned. This allows multiple, comma delimeted.
     * @param {Array<string>} [excludeItemTypes] If specified, results with these item types are filtered out. This allows multiple, comma delimeted.
     * @param {Array<string>} [mediaTypes] If specified, only results with the specified media types are returned. This allows multiple, comma delimeted.
     * @param {string} [parentId] If specified, only children of the parent are returned.
     * @param {boolean} [isMovie] Optional filter for movies.
     * @param {boolean} [isSeries] Optional filter for series.
     * @param {boolean} [isNews] Optional filter for news.
     * @param {boolean} [isKids] Optional filter for kids.
     * @param {boolean} [isSports] Optional filter for sports.
     * @param {boolean} [includePeople] Optional filter whether to include people.
     * @param {boolean} [includeMedia] Optional filter whether to include media.
     * @param {boolean} [includeGenres] Optional filter whether to include genres.
     * @param {boolean} [includeStudios] Optional filter whether to include studios.
     * @param {boolean} [includeArtists] Optional filter whether to include artists.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public get(searchTerm: string, startIndex?: number, limit?: number, userId?: string, includeItemTypes?: Array<string>, excludeItemTypes?: Array<string>, mediaTypes?: Array<string>, parentId?: string, isMovie?: boolean, isSeries?: boolean, isNews?: boolean, isKids?: boolean, isSports?: boolean, includePeople?: boolean, includeMedia?: boolean, includeGenres?: boolean, includeStudios?: boolean, includeArtists?: boolean, options?: any) {
        return SearchApiFp(this.configuration).get(searchTerm, startIndex, limit, userId, includeItemTypes, excludeItemTypes, mediaTypes, parentId, isMovie, isSeries, isNews, isKids, isSports, includePeople, includeMedia, includeGenres, includeStudios, includeArtists, options).then((request) => request(this.axios, this.basePath));
    }
}
